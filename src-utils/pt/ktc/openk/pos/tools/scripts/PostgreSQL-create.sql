--    (c) KTC - www.openk.pt
--    Author: Alexandre Braganca
--    Based on:
--
--    Openbravo POS is a point of sales application designed for touch screens.
--    Copyright (C) 2007-2009 Openbravo, S.L.
--    http://sourceforge.net/projects/openbravopos
--
--    This file is part of Openbravo POS.
--
--    Openbravo POS is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    Openbravo POS is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with Openbravo POS.  If not, see <http://www.gnu.org/licenses/>.


-- Tabela para controlar as sequencias de numeracao dos documentos
CREATE TABLE DOCS_IDS
(
  TICKETTYPE INTEGER NOT NULL,
  LAST_TICKETID INTEGER NOT NULL,
  CONSTRAINT DOCS_IDS_PKEY PRIMARY KEY (TICKETTYPE)
);
-- RECEIPT_NORMAL = 0;
INSERT INTO DOCS_IDS(TICKETTYPE, LAST_TICKETID) VALUES(0, 0);
-- RECEIPT_REFUND = 1;
INSERT INTO DOCS_IDS(TICKETTYPE, LAST_TICKETID) VALUES(1, 0);
-- RECEIPT_PAYMENT = 2;
INSERT INTO DOCS_IDS(TICKETTYPE, LAST_TICKETID) VALUES(2, 0);
-- RECEIPT_PREVIEW = 3;
INSERT INTO DOCS_IDS(TICKETTYPE, LAST_TICKETID) VALUES(3, 0);
-- RECEIPT_INVOICE = 4;
INSERT INTO DOCS_IDS(TICKETTYPE, LAST_TICKETID) VALUES(4, 0);

CREATE TABLE COMPANY
(
  ID CHARACTER VARYING NOT NULL,
  NAME CHARACTER VARYING NOT NULL,
  ADDRESS CHARACTER VARYING,
  TAXID CHARACTER VARYING NOT NULL,
  POSTAL CHARACTER VARYING,
  CITY CHARACTER VARYING,
  REGION CHARACTER VARYING,
  COUNTRY CHARACTER VARYING,
  BUSINESSREG CHARACTER VARYING,
  CONSTRAINT COMPANY_PKEY PRIMARY KEY (ID)
);

INSERT INTO COMPANY(ID, NAME, ADDRESS, TAXID, POSTAL, CITY, REGION, COUNTRY, BUSINESSREG) VALUES ('0', 'Empresa Demonstracao Lda', 'Rua da Empresa', '999999999', '4444-555', 'Cidade', 'Distrito', 'Pais', '999999999');

-- Extensoes ao Openbravo POS para o OpenK
--	ID VARCHAR NOT NULL,      				-- pos_id → o GUID do recibo
--	TICKETTYPE INTEGER NOT NULL,			-- o tipo do recibo
--	TICKETID INTEGER NOT NULL,				-- o numero do recibo
--	INVOICEDATE TIMESTAMP NOT NULL, 		-- InvoiceDate → receipts.datenew (AAAA-MM-DD)
--	SYSTEMENTRYDATE TIMESTAMP NOT NULL,		-- SystemEntryDate → receipts.datenew (AAAA-MM-DDTHH:MM:SS)
--	INVOICENO VARCHAR NOT NULL, 			-- InvoiceNo → (Ex: FAC 001/9) tickets.tickettype + tickets.ticketid
--	GROSSTOTAL DOUBLE PRECISION NOT NULL, 	-- GrossTotal → Soma de todos os valores de taxlines (base + amount) para esse recibo.
--	HASH VARCHAR NOT NULL,					-- Hash → A assinatura do documento anterior
--	SOURCE VARCHAR NOT NULL,				-- o texto origem a assinar
--	SIGNATURE VARCHAR NOT NULL,				-- pos_assinatura → A assinatura resultante para este documento/recibo
--	KEYVERSION VARCHAR NOT NULL,			-- pos_versao_chave_privada → versão da chave privada usada para gerar a assinatura
--	STAMP VARCHAR NOT NULL,   				-- o carimbo que sera usado na impressao dos recibos

CREATE TABLE SIGNATURES (
	ID VARCHAR NOT NULL,
	TICKETTYPE INTEGER NOT NULL,
	TICKETID INTEGER NOT NULL,
	INVOICEDATE TIMESTAMP NOT NULL,
	SYSTEMENTRYDATE TIMESTAMP NOT NULL,
	INVOICENO VARCHAR NOT NULL,
	GROSSTOTAL DOUBLE PRECISION NOT NULL,
	HASH VARCHAR NOT NULL,
	SOURCE VARCHAR NOT NULL,
	SIGNATURE VARCHAR NOT NULL,
	KEYVERSION VARCHAR NOT NULL,
	STAMP VARCHAR NOT NULL,
	REFERENCE VARCHAR,
	CUSTOMERNAME VARCHAR,
	CUSTOMERTAXID VARCHAR,
	CUSTOMERADDRESS VARCHAR,
	CUSTOMERPOSTAL VARCHAR,
	CUSTOMERCITY VARCHAR,
	PLACE VARCHAR,
	PRIMARY KEY (ID)
);
CREATE INDEX SIGNATURES_TICKETID ON SIGNATURES(TICKETTYPE, TICKETID);
CREATE INDEX SIGNATURES_REFERENCE ON SIGNATURES(REFERENCE);


-- Database initial script for POSTGRESQL
-- v2.30

CREATE TABLE APPLICATIONS (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    VERSION VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);
INSERT INTO APPLICATIONS(ID, NAME, VERSION) VALUES($APP_ID{}, $APP_NAME{}, $APP_VERSION{});

CREATE TABLE ROLES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PERMISSIONS BYTEA,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX ROLES_NAME_INX ON ROLES(NAME);
INSERT INTO ROLES(ID, NAME, PERMISSIONS) VALUES('0', 'Papel Administrador', $FILE{/pt/ktc/openk/pos/tools/templates/Role.Administrator.xml} );
INSERT INTO ROLES(ID, NAME, PERMISSIONS) VALUES('1', 'Papel Gerente', $FILE{/pt/ktc/openk/pos/tools/templates/Role.Manager.xml} );
INSERT INTO ROLES(ID, NAME, PERMISSIONS) VALUES('2', 'Papel Empregado', $FILE{/pt/ktc/openk/pos/tools/templates/Role.Employee.xml} );

CREATE TABLE PEOPLE (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    APPPASSWORD VARCHAR,
    CARD VARCHAR,
    ROLE VARCHAR NOT NULL,
    VISIBLE BOOLEAN NOT NULL,
    IMAGE BYTEA,
    PRIMARY KEY (ID),
    CONSTRAINT PEOPLE_FK_1 FOREIGN KEY (ROLE) REFERENCES ROLES(ID)
);
CREATE UNIQUE INDEX PEOPLE_NAME_INX ON PEOPLE(NAME);
CREATE INDEX PEOPLE_CARD_INX ON PEOPLE(CARD);

INSERT INTO PEOPLE(ID, NAME, APPPASSWORD, ROLE, VISIBLE, IMAGE) VALUES ('0', 'Administrador', '???', '0', TRUE, NULL);
INSERT INTO PEOPLE(ID, NAME, APPPASSWORD, ROLE, VISIBLE, IMAGE) VALUES ('1', 'Gerente', NULL, '1', TRUE, NULL);
INSERT INTO PEOPLE(ID, NAME, APPPASSWORD, ROLE, VISIBLE, IMAGE) VALUES ('2', 'Empregado', NULL, '2', TRUE, NULL);

CREATE TABLE RESOURCES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    RESTYPE INTEGER NOT NULL,
    CONTENT BYTEA,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX RESOURCES_NAME_INX ON RESOURCES(NAME);
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('0', 'Printer.Start', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Start.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('1', 'Printer.Ticket', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Ticket.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('2', 'Printer.Ticket2', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Ticket2.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('3', 'Printer.TicketPreview', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.TicketPreview.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('4', 'Printer.TicketTotal', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.TicketTotal.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('5', 'Printer.OpenDrawer', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.OpenDrawer.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('6', 'Printer.Ticket.Logo', 1, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Ticket.Logo.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('7', 'Printer.TicketLine', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.TicketLine.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('8', 'Printer.CloseCash', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.CloseCash.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('9', 'Window.Logo', 1, $FILE{/pt/ktc/openk/pos/tools/templates/Window.Logo.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('10', 'Window.Title', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Window.Title.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('11', 'Ticket.Buttons', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Ticket.Buttons.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('12', 'Ticket.Line', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Ticket.Line.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('13', 'Printer.Inventory', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Inventory.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('14', 'Menu.Root', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Menu.Root.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('15', 'Printer.CustomerPaid', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.CustomerPaid.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('16', 'Printer.CustomerPaid2', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.CustomerPaid2.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('17', 'payment.cash', 0, $FILE{/pt/ktc/openk/pos/tools/templates/payment.cash.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('18', 'banknote.50euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/banknote.50euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('19', 'banknote.20euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/banknote.20euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('20', 'banknote.10euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/banknote.10euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('21', 'banknote.5euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/banknote.5euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('22', 'coin.2euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.2euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('23', 'coin.1euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.1euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('24', 'coin.50cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.50cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('25', 'coin.20cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.20cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('26', 'coin.10cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.10cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('27', 'coin.5cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.5cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('28', 'coin.2cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.2cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('29', 'coin.1cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.1cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('30', 'Printer.PartialCash', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.PartialCash.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('31', 'Printer.TicketCopy', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.TicketCopy.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('32', 'Kitchen.Ticket', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Kitchen.Ticket.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('33', 'Kitchen_2.Ticket', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Kitchen_2.Ticket.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('34', 'code.order', 0, $FILE{/pt/ktc/openk/pos/tools/templates/code.order.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('35', 'event.addline', 0, $FILE{/pt/ktc/openk/pos/tools/templates/event.addline.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('36', 'event.removeline', 0, $FILE{/pt/ktc/openk/pos/tools/templates/event.removeline.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('37', 'event.setline', 0, $FILE{/pt/ktc/openk/pos/tools/templates/event.setline.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('38', 'code.preview', 0, $FILE{/pt/ktc/openk/pos/tools/templates/code.preview.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('39', 'Printer.ProductSales', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.ProductSales.xml});


CREATE TABLE TAXCUSTCATEGORIES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX TAXCUSTCAT_NAME_INX ON TAXCUSTCATEGORIES(NAME);

--    ADDRESS VARCHAR NOT NULL,      -- (ATB) Agora e obrigatorio
--    POSTAL VARCHAR NOT NULL,         -- (ATB) Agora e obrigatorio
--    CITY VARCHAR NOT NULL,      -- (ATB) Agora e obrigatorio
--    COUNTRY VARCHAR NOT NULL,  -- (ATB) Agora e obrigatorio

CREATE TABLE CUSTOMERS (
    ID VARCHAR NOT NULL,
    SEARCHKEY VARCHAR,
    TAXID VARCHAR NOT NULL,
    NAME VARCHAR,
    TAXCATEGORY VARCHAR,
    CARD VARCHAR,
    MAXDEBT DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ADDRESS VARCHAR DEFAULT 'Rua',
    ADDRESS2 VARCHAR,
    POSTAL VARCHAR DEFAULT '1111-111',
    CITY VARCHAR DEFAULT 'Cidade',
    REGION VARCHAR,
    COUNTRY VARCHAR DEFAULT 'Portugal',
    FIRSTNAME VARCHAR,
    LASTNAME VARCHAR,
    EMAIL VARCHAR,
    PHONE VARCHAR,
    PHONE2 VARCHAR,
    FAX VARCHAR,
    NOTES VARCHAR,
    VISIBLE BOOLEAN NOT NULL DEFAULT TRUE,
    CURDATE TIMESTAMP,
    CURDEBT DOUBLE PRECISION,
    PRIMARY KEY (ID),
    CONSTRAINT CUSTOMERS_TAXCAT FOREIGN KEY (TAXCATEGORY) REFERENCES TAXCUSTCATEGORIES(ID)
);
CREATE INDEX CUSTOMERS_SKEY_INX ON CUSTOMERS(SEARCHKEY);
CREATE INDEX CUSTOMERS_TAXID_INX ON CUSTOMERS(TAXID);
CREATE INDEX CUSTOMERS_NAME_INX ON CUSTOMERS(NAME);
CREATE INDEX CUSTOMERS_CARD_INX ON CUSTOMERS(CARD);
--INSERT INTO CUSTOMERS(ID, SEARCHKEY, TAXID, NAME, ADDRESS, POSTAL, CITY, COUNTRY) VALUES ('10000000-0000-0000-0000-000000000000', 'Cliente 1', '555666555', 'Cliente 1 Lda', 'Rua do Cliente 1', '4444-111', 'Cidade', 'Portugal');
--INSERT INTO CUSTOMERS(ID, SEARCHKEY, TAXID, NAME, ADDRESS, POSTAL, CITY, COUNTRY) VALUES ('20000000-0000-0000-0000-000000000000', 'Cliente 2', '444666555', 'Cliente 2 Lda', 'Rua do Cliente 2', '4444-111', 'Cidade', 'Portugal');
--INSERT INTO CUSTOMERS(ID, SEARCHKEY, TAXID, NAME, ADDRESS, POSTAL, CITY, COUNTRY) VALUES ('30000000-0000-0000-0000-000000000000', 'Cliente 3', '333666555', 'Cliente 3 Lda', 'Rua do Cliente 3', '4444-111', 'Cidade', 'Portugal');

CREATE TABLE CATEGORIES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PARENTID VARCHAR,
    IMAGE BYTEA,
    PRIMARY KEY(ID),
    CONSTRAINT CATEGORIES_FK_1 FOREIGN KEY (PARENTID) REFERENCES CATEGORIES(ID)
);
CREATE UNIQUE INDEX CATEGORIES_NAME_INX ON CATEGORIES(NAME);

CREATE TABLE TAXCATEGORIES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX TAXCAT_NAME_INX ON TAXCATEGORIES(NAME);
INSERT INTO TAXCATEGORIES(ID, NAME) VALUES ('001', 'Taxa Reduz. (6%)');
INSERT INTO TAXCATEGORIES(ID, NAME) VALUES ('002', 'Taxa Inter. (13%)');
INSERT INTO TAXCATEGORIES(ID, NAME) VALUES ('003', 'Taxa Normal (23%)');
INSERT INTO TAXCATEGORIES(ID, NAME) VALUES ('004', 'Isencao Art 9, n 10');

CREATE TABLE TAXES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    CATEGORY VARCHAR NOT NULL,
    CUSTCATEGORY VARCHAR,
    PARENTID VARCHAR,
    RATE DOUBLE PRECISION NOT NULL,
    RATECASCADE BOOLEAN NOT NULL DEFAULT FALSE,
    RATEORDER INTEGER,
    PRIMARY KEY(ID),
    CONSTRAINT TAXES_CAT_FK FOREIGN KEY (CATEGORY) REFERENCES TAXCATEGORIES(ID),
    CONSTRAINT TAXES_CUSTCAT_FK FOREIGN KEY (CUSTCATEGORY) REFERENCES TAXCUSTCATEGORIES(ID),
    CONSTRAINT TAXES_TAXES_FK FOREIGN KEY (PARENTID) REFERENCES TAXES(ID)
);
CREATE UNIQUE INDEX TAXES_NAME_INX ON TAXES(NAME);
INSERT INTO TAXES(ID, NAME, CATEGORY, CUSTCATEGORY, PARENTID, RATE, RATECASCADE, RATEORDER) VALUES ('001', 'Taxa Reduz. (6%)', '001', NULL, NULL, 0.06, FALSE, NULL);
INSERT INTO TAXES(ID, NAME, CATEGORY, CUSTCATEGORY, PARENTID, RATE, RATECASCADE, RATEORDER) VALUES ('002', 'Taxa Inter. (13%)', '002', NULL, NULL, 0.13, FALSE, NULL);
INSERT INTO TAXES(ID, NAME, CATEGORY, CUSTCATEGORY, PARENTID, RATE, RATECASCADE, RATEORDER) VALUES ('003', 'Taxa Normal (23%)', '003', NULL, NULL, 0.23, FALSE, NULL);
INSERT INTO TAXES(ID, NAME, CATEGORY, CUSTCATEGORY, PARENTID, RATE, RATECASCADE, RATEORDER) VALUES ('004', 'Isencao Art9, n 10', '004', NULL, NULL, 0.0, FALSE, NULL);


CREATE TABLE ATTRIBUTE (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE ATTRIBUTEVALUE (
    ID VARCHAR NOT NULL,
    ATTRIBUTE_ID VARCHAR NOT NULL,
    VALUE VARCHAR,
    PRIMARY KEY (ID),
    CONSTRAINT ATTVAL_ATT FOREIGN KEY (ATTRIBUTE_ID) REFERENCES ATTRIBUTE(ID) ON DELETE CASCADE
);

CREATE TABLE ATTRIBUTESET (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE ATTRIBUTEUSE (
    ID VARCHAR NOT NULL,
    ATTRIBUTESET_ID VARCHAR NOT NULL,
    ATTRIBUTE_ID VARCHAR NOT NULL,
    LINENO INTEGER,
    PRIMARY KEY (ID),
    CONSTRAINT ATTUSE_SET FOREIGN KEY (ATTRIBUTESET_ID) REFERENCES ATTRIBUTESET(ID) ON DELETE CASCADE,
    CONSTRAINT ATTUSE_ATT FOREIGN KEY (ATTRIBUTE_ID) REFERENCES ATTRIBUTE(ID)
);
CREATE UNIQUE INDEX ATTUSE_LINE ON ATTRIBUTEUSE(ATTRIBUTESET_ID, LINENO);

CREATE TABLE ATTRIBUTESETINSTANCE (
    ID VARCHAR NOT NULL,
    ATTRIBUTESET_ID VARCHAR NOT NULL,
    DESCRIPTION VARCHAR,
    PRIMARY KEY (ID),
    CONSTRAINT ATTSETINST_SET FOREIGN KEY (ATTRIBUTESET_ID) REFERENCES ATTRIBUTESET(ID) ON DELETE CASCADE
);

CREATE TABLE ATTRIBUTEINSTANCE (
    ID VARCHAR NOT NULL,
    ATTRIBUTESETINSTANCE_ID VARCHAR NOT NULL,
    ATTRIBUTE_ID VARCHAR NOT NULL,
    VALUE VARCHAR,
    PRIMARY KEY (ID),
    CONSTRAINT ATTINST_SET FOREIGN KEY (ATTRIBUTESETINSTANCE_ID) REFERENCES ATTRIBUTESETINSTANCE(ID) ON DELETE CASCADE,
    CONSTRAINT ATTINST_ATT FOREIGN KEY (ATTRIBUTE_ID) REFERENCES ATTRIBUTE(ID)
);

CREATE TABLE PRODUCTS (
    ID VARCHAR NOT NULL,
    REFERENCE VARCHAR NOT NULL,
    CODE VARCHAR NOT NULL,
    CODETYPE VARCHAR,
    NAME VARCHAR NOT NULL,
    PRICEBUY DOUBLE PRECISION NOT NULL,
    PRICESELL DOUBLE PRECISION NOT NULL,
    CATEGORY VARCHAR NOT NULL,
    TAXCAT VARCHAR NOT NULL,
    ATTRIBUTESET_ID VARCHAR,
    STOCKCOST DOUBLE PRECISION,
    STOCKVOLUME DOUBLE PRECISION,
    IMAGE BYTEA,
    ISCOM BOOLEAN NOT NULL DEFAULT FALSE,
    ISSCALE BOOLEAN NOT NULL DEFAULT FALSE,
    ATTRIBUTES BYTEA,
    PRIMARY KEY (ID),
    CONSTRAINT PRODUCTS_FK_1 FOREIGN KEY (CATEGORY) REFERENCES CATEGORIES(ID),
    CONSTRAINT PRODUCTS_TAXCAT_FK FOREIGN KEY (TAXCAT) REFERENCES TAXCATEGORIES(ID),
    CONSTRAINT PRODUCTS_ATTRSET_FK FOREIGN KEY (ATTRIBUTESET_ID) REFERENCES ATTRIBUTESET(ID)
);
CREATE UNIQUE INDEX PRODUCTS_INX_0 ON PRODUCTS(REFERENCE);
CREATE UNIQUE INDEX PRODUCTS_INX_1 ON PRODUCTS(CODE);
CREATE UNIQUE INDEX PRODUCTS_NAME_INX ON PRODUCTS(NAME);


CREATE TABLE PRODUCTS_CAT (
    PRODUCT VARCHAR NOT NULL,
    CATORDER INTEGER,
    PRIMARY KEY (PRODUCT),
    CONSTRAINT PRODUCTS_CAT_FK_1 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID)
);
CREATE INDEX PRODUCTS_CAT_INX_1 ON PRODUCTS_CAT(CATORDER);

CREATE TABLE PRODUCTS_COM (
    ID VARCHAR NOT NULL,
    PRODUCT VARCHAR NOT NULL,
    PRODUCT2 VARCHAR NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT PRODUCTS_COM_FK_1 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT PRODUCTS_COM_FK_2 FOREIGN KEY (PRODUCT2) REFERENCES PRODUCTS(ID)
);
CREATE UNIQUE INDEX PCOM_INX_PROD ON PRODUCTS_COM(PRODUCT, PRODUCT2);

INSERT INTO CATEGORIES(ID, NAME) VALUES ('0', 'Geral');

CREATE TABLE LOCATIONS (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    ADDRESS VARCHAR,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX LOCATIONS_NAME_INX ON LOCATIONS(NAME);
INSERT INTO LOCATIONS(ID, NAME,ADDRESS) VALUES('0', 'Central', NULL);

CREATE TABLE STOCKDIARY (
    ID VARCHAR NOT NULL,
    DATENEW TIMESTAMP NOT NULL,
    REASON INTEGER NOT NULL,
    LOCATION VARCHAR NOT NULL,
    PRODUCT VARCHAR NOT NULL,
    ATTRIBUTESETINSTANCE_ID VARCHAR,
    UNITS DOUBLE PRECISION NOT NULL,
    PRICE DOUBLE PRECISION NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT STOCKDIARY_FK_1 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT STOCKDIARY_ATTSETINST FOREIGN KEY (ATTRIBUTESETINSTANCE_ID) REFERENCES ATTRIBUTESETINSTANCE(ID),
    CONSTRAINT STOCKDIARY_FK_2 FOREIGN KEY (LOCATION) REFERENCES LOCATIONS(ID)
);
CREATE INDEX STOCKDIARY_INX_1 ON STOCKDIARY(DATENEW);

CREATE TABLE STOCKLEVEL (
    ID VARCHAR NOT NULL,
    LOCATION VARCHAR NOT NULL,
    PRODUCT VARCHAR NOT NULL,
    STOCKSECURITY DOUBLE PRECISION,
    STOCKMAXIMUM DOUBLE PRECISION,
    PRIMARY KEY (ID),
    CONSTRAINT STOCKLEVEL_PRODUCT FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT STOCKLEVEL_LOCATION FOREIGN KEY (LOCATION) REFERENCES LOCATIONS(ID)
);

CREATE TABLE STOCKCURRENT (
    LOCATION VARCHAR NOT NULL,
    PRODUCT VARCHAR NOT NULL,
    ATTRIBUTESETINSTANCE_ID VARCHAR,
    UNITS DOUBLE PRECISION NOT NULL,
    CONSTRAINT STOCKCURRENT_FK_1 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT STOCKCURRENT_ATTSETINST FOREIGN KEY (ATTRIBUTESETINSTANCE_ID) REFERENCES ATTRIBUTESETINSTANCE(ID),
    CONSTRAINT STOCKCURRENT_FK_2 FOREIGN KEY (LOCATION) REFERENCES LOCATIONS(ID)
);
CREATE UNIQUE INDEX STOCKCURRENT_INX ON STOCKCURRENT(LOCATION, PRODUCT, ATTRIBUTESETINSTANCE_ID);

CREATE TABLE CLOSEDCASH (
    MONEY VARCHAR NOT NULL,
    HOST VARCHAR NOT NULL,
    HOSTSEQUENCE INTEGER NOT NULL,
    DATESTART TIMESTAMP NOT NULL,
    DATEEND TIMESTAMP,
    PRIMARY KEY(MONEY)
);
CREATE INDEX CLOSEDCASH_INX_1 ON CLOSEDCASH(DATESTART);
CREATE UNIQUE INDEX CLOSEDCASH_INX_SEQ ON CLOSEDCASH(HOST, HOSTSEQUENCE);

CREATE TABLE RECEIPTS (
    ID VARCHAR NOT NULL,
    MONEY VARCHAR NOT NULL,
    DATENEW TIMESTAMP NOT NULL,
    ATTRIBUTES BYTEA,
    PRIMARY KEY(ID),
    CONSTRAINT RECEIPTS_FK_MONEY FOREIGN KEY (MONEY) REFERENCES CLOSEDCASH(MONEY)
);
CREATE INDEX RECEIPTS_INX_1 ON RECEIPTS(DATENEW);

CREATE TABLE TICKETS (
    ID VARCHAR NOT NULL,
    TICKETTYPE INTEGER DEFAULT 0 NOT NULL,
    TICKETID INTEGER NOT NULL,
    PERSON VARCHAR NOT NULL,
    CUSTOMER VARCHAR,
    STATUS INTEGER DEFAULT 0 NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT TICKETS_FK_ID FOREIGN KEY (ID) REFERENCES RECEIPTS(ID),
    CONSTRAINT TICKETS_FK_2 FOREIGN KEY (PERSON) REFERENCES PEOPLE(ID),
    CONSTRAINT TICKETS_CUSTOMERS_FK FOREIGN KEY (CUSTOMER) REFERENCES CUSTOMERS(ID)
);
CREATE INDEX TICKETS_TICKETID ON TICKETS(TICKETTYPE, TICKETID);

-- As sequencias deixaram de ser necessarias
-- CREATE SEQUENCE TICKETSNUM START WITH 1;
-- CREATE SEQUENCE TICKETSNUM_REFUND START WITH 1;
-- CREATE SEQUENCE TICKETSNUM_PAYMENT START WITH 1;
-- uma nova sequencia para as consultas de mesa (preview)
-- CREATE SEQUENCE TICKETSNUM_PREVIEW START WITH 1;

-- BASEPRICE e DISCOUNT sao novas colunas para suportar descontos
CREATE TABLE TICKETLINES (
    TICKET VARCHAR NOT NULL,
    LINE INTEGER NOT NULL,
    PRODUCT VARCHAR,
    ATTRIBUTESETINSTANCE_ID VARCHAR,
    UNITS DOUBLE PRECISION NOT NULL,
    PRICE DOUBLE PRECISION NOT NULL,
    TAXID VARCHAR NOT NULL,
    ATTRIBUTES BYTEA,
    BASEPRICE double precision NOT NULL default 0,
    DISCOUNT double precision NOT NULL default 0,
    PRIMARY KEY (TICKET, LINE),
    CONSTRAINT TICKETLINES_FK_TICKET FOREIGN KEY (TICKET) REFERENCES TICKETS(ID),
    CONSTRAINT TICKETLINES_FK_2 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT TICKETLINES_ATTSETINST FOREIGN KEY (ATTRIBUTESETINSTANCE_ID) REFERENCES ATTRIBUTESETINSTANCE(ID),
    CONSTRAINT TICKETLINES_FK_3 FOREIGN KEY (TAXID) REFERENCES TAXES(ID)
);

CREATE TABLE PAYMENTS (
    ID VARCHAR NOT NULL,
    RECEIPT VARCHAR NOT NULL,
    PAYMENT VARCHAR NOT NULL,
    TOTAL DOUBLE PRECISION NOT NULL,
    TRANSID VARCHAR,
    RETURNMSG BYTEA,
    PRIMARY KEY (ID),
    CONSTRAINT PAYMENTS_FK_RECEIPT FOREIGN KEY (RECEIPT) REFERENCES RECEIPTS(ID)
);
CREATE INDEX PAYMENTS_INX_1 ON PAYMENTS(PAYMENT);

CREATE TABLE TAXLINES (
    ID VARCHAR NOT NULL,
    RECEIPT VARCHAR NOT NULL,
    TAXID VARCHAR NOT NULL,
    BASE DOUBLE PRECISION NOT NULL,
    AMOUNT DOUBLE PRECISION NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT TAXLINES_TAX FOREIGN KEY (TAXID) REFERENCES TAXES(ID),
    CONSTRAINT TAXLINES_RECEIPT FOREIGN KEY (RECEIPT) REFERENCES RECEIPTS(ID)
);

CREATE TABLE FLOORS (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    IMAGE BYTEA,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX FLOORS_NAME_INX ON FLOORS(NAME);
INSERT INTO FLOORS(ID, NAME, IMAGE) VALUES ('0', 'Sala 1', $FILE{/pt/ktc/openk/pos/tools/images/mesas1.png});
INSERT INTO FLOORS(ID, NAME, IMAGE) VALUES ('1', 'Sala 2', $FILE{/pt/ktc/openk/pos/tools/images/mesas2.png});


CREATE TABLE PLACES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    X INTEGER NOT NULL,
    Y INTEGER NOT NULL,
    FLOOR VARCHAR NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT PLACES_FK_1 FOREIGN KEY (FLOOR) REFERENCES FLOORS(ID)
);
CREATE UNIQUE INDEX PLACES_NAME_INX ON PLACES(NAME);
-- Sala 1
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('100', 'Balcao 1', 280, 75, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('101', 'Mesa 1', 100, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('102', 'Mesa 2', 247, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('103', 'Mesa 3', 394, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('104', 'Mesa 4', 541, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('105', 'Mesa 5', 688, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('106', 'Mesa 6', 100, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('107', 'Mesa 7', 247, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('108', 'Mesa 8', 394, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('109', 'Mesa 9', 541, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('110', 'Mesa 10', 688, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('111', 'Mesa 11', 100, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('112', 'Mesa 12', 247, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('113', 'Mesa 13', 394, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('114', 'Mesa 14', 541, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('115', 'Mesa 15', 688, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('116', 'Mesa 16', 100, 438, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('117', 'Mesa 17', 247, 438, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('118', 'Mesa 18', 394, 438, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('119', 'Mesa 19', 541, 438, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('120', 'Mesa 20', 688, 438, '0');

-- Sala 2
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('200', 'Balcao 2', 280, 75, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('201', 'Mesa 21', 100, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('202', 'Mesa 22', 247, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('203', 'Mesa 23', 394, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('204', 'Mesa 24', 541, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('205', 'Mesa 25', 688, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('206', 'Mesa 26', 100, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('207', 'Mesa 27', 247, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('208', 'Mesa 28', 394, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('209', 'Mesa 29', 541, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('210', 'Mesa 30', 688, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('211', 'Mesa 31', 100, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('212', 'Mesa 32', 247, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('213', 'Mesa 33', 394, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('214', 'Mesa 34', 541, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('215', 'Mesa 35', 688, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('216', 'Mesa 36', 100, 438, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('217', 'Mesa 37', 247, 438, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('218', 'Mesa 38', 394, 438, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('219', 'Mesa 39', 541, 438, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('220', 'Mesa 40', 688, 438, '1');

CREATE TABLE RESERVATIONS (
    ID VARCHAR NOT NULL,
    CREATED TIMESTAMP NOT NULL,
    DATENEW TIMESTAMP DEFAULT '2001-01-01 00:00:00' NOT NULL,
    TITLE VARCHAR NOT NULL,
    CHAIRS INTEGER NOT NULL,
    ISDONE BOOLEAN NOT NULL,
    DESCRIPTION VARCHAR,
    PRIMARY KEY (ID)
);
CREATE INDEX RESERVATIONS_INX_1 ON RESERVATIONS(DATENEW);

CREATE TABLE RESERVATION_CUSTOMERS (
    ID VARCHAR NOT NULL,
    CUSTOMER VARCHAR NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT RES_CUST_FK_1 FOREIGN KEY (ID) REFERENCES RESERVATIONS(ID),
    CONSTRAINT RES_CUST_FK_2 FOREIGN KEY (CUSTOMER) REFERENCES CUSTOMERS(ID)
);

CREATE TABLE THIRDPARTIES (
    ID VARCHAR NOT NULL,
    CIF VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    ADDRESS VARCHAR,
    CONTACTCOMM VARCHAR,
    CONTACTFACT VARCHAR,
    PAYRULE VARCHAR,
    FAXNUMBER VARCHAR,
    PHONENUMBER VARCHAR,
    MOBILENUMBER VARCHAR,
    EMAIL VARCHAR,
    WEBPAGE VARCHAR,
    NOTES VARCHAR,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX THIRDPARTIES_CIF_INX ON THIRDPARTIES(CIF);
CREATE UNIQUE INDEX THIRDPARTIES_NAME_INX ON THIRDPARTIES(NAME);

CREATE TABLE SHAREDTICKETS (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    CONTENT BYTEA,
    REFERENCE VARCHAR NULL,
    PRIMARY KEY(ID)
);

-- Criar o role/login 'openk'
-- SELECT count(rolname) as exist_openk FROM pg_roles where rolname='openk';
-- if (exist_openk=0)
create role openk LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE PASSWORD '???';

-- Dar acesso ao utilizador 'openk'
grant select, insert, update, delete on applications to openk;
grant select, insert, update, delete on attribute to openk;
grant select, insert, update, delete on attributeinstance to openk;
grant select, insert, update, delete on attributeset to openk;
grant select, insert, update, delete on attributesetinstance to openk;
grant select, insert, update, delete on attributeuse to openk;
grant select, insert, update, delete on attributevalue to openk;
grant select, insert, update, delete on categories to openk;
grant select, insert, update, delete on closedcash to openk;
grant select, insert, update, delete on company to openk;
grant select, insert, update, delete on customers to openk;
grant select, insert, update, delete on floors to openk;
-- ISTO NAO SE PODE FAZER grant select, insert, update, delete on keys to openk;
grant select, insert, update, delete on locations to openk;
grant select, insert, update, delete on payments to openk;
grant select, insert, update, delete on people to openk;
grant select, insert, update, delete on places to openk;
grant select, insert, update, delete on products to openk;
grant select, insert, update, delete on products_cat to openk;
grant select, insert, update, delete on products_com to openk;
grant select, insert on receipts to openk;
grant select, insert, update, delete on reservation_customers to openk;
grant select, insert, update, delete on reservations to openk;
-- O seguinte e' necessario para guardar o activecash
grant select, insert, update on resources to openk;
grant select, insert, update, delete on roles to openk;
grant select, insert, update, delete on sharedtickets to openk;
-- ISTO E MUITO IMPORTANTE!
grant select, insert on signatures to openk;
grant select, insert, update, delete on stockcurrent to openk;
grant select, insert, update, delete on stockdiary to openk;
grant select, insert, update, delete on stocklevel to openk;
grant select, insert, update, delete on taxcategories to openk;
grant select, insert, update, delete on taxcustcategories to openk;
grant select, insert, update, delete on taxes to openk;
grant select, insert on taxlines to openk;
grant select, insert, update, delete on thirdparties to openk;
grant select, insert on ticketlines to openk;
grant select, insert on tickets to openk;

-- grant select, update on ticketsnum to openk;
-- grant select, update on ticketsnum_payment to openk;
-- grant select, update on ticketsnum_refund to openk;
-- grant select, update on ticketsnum_preview to openk;

-- Alterar a password do superuser 'postgres'
ALTER ROLE postgres PASSWORD '????';
-- NOTA que a password do Administrador da aplicacao e ''????'

-- Alterar a password do utilizador normal 'openk'
ALTER ROLE openk PASSWORD '????';
