--    Openbravo POS is a point of sales application designed for touch screens.
--    Copyright (C) 2007-2009 Openbravo, S.L.
--    http://sourceforge.net/projects/openbravopos
--
--    This file is part of Openbravo POS.
--
--    Openbravo POS is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    Openbravo POS is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with Openbravo POS.  If not, see <http://www.gnu.org/licenses/>.


-- Tabela para controlar as sequencias de numeracao dos documentos
CREATE TABLE DOCS_IDS
(
  TICKETTYPE INTEGER NOT NULL,
  LAST_TICKETID INTEGER NOT NULL,
  CONSTRAINT DOCS_IDS_PKEY PRIMARY KEY (TICKETTYPE)
);
-- RECEIPT_NORMAL = 0;
INSERT INTO DOCS_IDS(TICKETTYPE, LAST_TICKETID) VALUES(0, 0);
-- RECEIPT_REFUND = 1;
INSERT INTO DOCS_IDS(TICKETTYPE, LAST_TICKETID) VALUES(1, 0);
-- RECEIPT_PAYMENT = 2;
INSERT INTO DOCS_IDS(TICKETTYPE, LAST_TICKETID) VALUES(2, 0);
-- RECEIPT_PREVIEW = 3;
INSERT INTO DOCS_IDS(TICKETTYPE, LAST_TICKETID) VALUES(3, 0);

-- Tabela para conter as chaves
CREATE TABLE KEYS
(
  ID CHARACTER VARYING NOT NULL,
  VERSION CHARACTER VARYING NOT NULL,
  PRIVATE CHARACTER VARYING NOT NULL,
  PUBLIC CHARACTER VARYING NOT NULL,
  CONSTRAINT KEYS_PKEY PRIMARY KEY (ID)
);

CREATE TABLE COMPANY
(
  ID CHARACTER VARYING NOT NULL,
  NAME CHARACTER VARYING NOT NULL,
  ADDRESS CHARACTER VARYING,
  TAXID CHARACTER VARYING NOT NULL,
  POSTAL CHARACTER VARYING,
  CITY CHARACTER VARYING,
  REGION CHARACTER VARYING,
  COUNTRY CHARACTER VARYING,
  BUSINESSREG CHARACTER VARYING,
  CONSTRAINT COMPANY_PKEY PRIMARY KEY (ID)
);

INSERT INTO COMPANY(ID, NAME, ADDRESS, TAXID, POSTAL, CITY, REGION, COUNTRY, BUSINESSREG) VALUES ('0', 'Empresa Demonstracao Lda', 'Rua da Empresa', '999999999', '4444-555', 'Cidade', 'Distrito', 'Pais', '999999999');

-- Extensoes ao Openbravo POS para o OpenK
--	ID VARCHAR NOT NULL,      				-- pos_id → o GUID do recibo
--	TICKETTYPE INTEGER NOT NULL,			-- o tipo do recibo
--	TICKETID INTEGER NOT NULL,				-- o numero do recibo
--	INVOICEDATE TIMESTAMP NOT NULL, 		-- InvoiceDate → receipts.datenew (AAAA-MM-DD)
--	SYSTEMENTRYDATE TIMESTAMP NOT NULL,		-- SystemEntryDate → receipts.datenew (AAAA-MM-DDTHH:MM:SS)
--	INVOICENO VARCHAR NOT NULL, 			-- InvoiceNo → (Ex: FAC 001/9) tickets.tickettype + tickets.ticketid
--	GROSSTOTAL DOUBLE PRECISION NOT NULL, 	-- GrossTotal → Soma de todos os valores de taxlines (base + amount) para esse recibo.
--	HASH VARCHAR NOT NULL,					-- Hash → A assinatura do documento anterior
--	SOURCE VARCHAR NOT NULL,				-- o texto origem a assinar
--	SIGNATURE VARCHAR NOT NULL,				-- pos_assinatura → A assinatura resultante para este documento/recibo
--	KEYVERSION VARCHAR NOT NULL,			-- pos_versao_chave_privada → versão da chave privada usada para gerar a assinatura
--	STAMP VARCHAR NOT NULL,   				-- o carimbo que sera usado na impressao dos recibos

CREATE TABLE SIGNATURES (
	ID VARCHAR NOT NULL,
	TICKETTYPE INTEGER NOT NULL,
	TICKETID INTEGER NOT NULL,
	INVOICEDATE TIMESTAMP NOT NULL,
	SYSTEMENTRYDATE TIMESTAMP NOT NULL,
	INVOICENO VARCHAR NOT NULL,
	GROSSTOTAL DOUBLE PRECISION NOT NULL,
	HASH VARCHAR NOT NULL,
	SOURCE VARCHAR NOT NULL,
	SIGNATURE VARCHAR NOT NULL,
	KEYVERSION VARCHAR NOT NULL,
	STAMP VARCHAR NOT NULL,
	REFERENCE VARCHAR,
	CUSTOMERNAME VARCHAR,
	CUSTOMERTAXID VARCHAR,
	CUSTOMERADDRESS VARCHAR,
	CUSTOMERPOSTAL VARCHAR,
	CUSTOMERCITY VARCHAR,
	PRIMARY KEY (ID)
);

-- Database initial script for POSTGRESQL
-- v2.30

CREATE TABLE APPLICATIONS (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    VERSION VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);
INSERT INTO APPLICATIONS(ID, NAME, VERSION) VALUES($APP_ID{}, $APP_NAME{}, $APP_VERSION{});

CREATE TABLE ROLES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PERMISSIONS BYTEA,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX ROLES_NAME_INX ON ROLES(NAME);
INSERT INTO ROLES(ID, NAME, PERMISSIONS) VALUES('0', 'Papel Administrador', $FILE{/pt/ktc/openk/pos/tools/templates/Role.Administrator.xml} );
INSERT INTO ROLES(ID, NAME, PERMISSIONS) VALUES('1', 'Papel Gerente', $FILE{/pt/ktc/openk/pos/tools/templates/Role.Manager.xml} );
INSERT INTO ROLES(ID, NAME, PERMISSIONS) VALUES('2', 'Papel Empregado', $FILE{/pt/ktc/openk/pos/tools/templates/Role.Employee.xml} );

CREATE TABLE PEOPLE (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    APPPASSWORD VARCHAR,
    CARD VARCHAR,
    ROLE VARCHAR NOT NULL,
    VISIBLE BOOLEAN NOT NULL,
    IMAGE BYTEA,
    PRIMARY KEY (ID),
    CONSTRAINT PEOPLE_FK_1 FOREIGN KEY (ROLE) REFERENCES ROLES(ID)
);
CREATE UNIQUE INDEX PEOPLE_NAME_INX ON PEOPLE(NAME);
CREATE INDEX PEOPLE_CARD_INX ON PEOPLE(CARD);

INSERT INTO PEOPLE(ID, NAME, APPPASSWORD, ROLE, VISIBLE, IMAGE) VALUES ('0', 'Administrador', '???', '0', TRUE, NULL);
INSERT INTO PEOPLE(ID, NAME, APPPASSWORD, ROLE, VISIBLE, IMAGE) VALUES ('1', 'Gerente', NULL, '1', TRUE, NULL);
INSERT INTO PEOPLE(ID, NAME, APPPASSWORD, ROLE, VISIBLE, IMAGE) VALUES ('2', 'Empregado', NULL, '2', TRUE, NULL);

CREATE TABLE RESOURCES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    RESTYPE INTEGER NOT NULL,
    CONTENT BYTEA,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX RESOURCES_NAME_INX ON RESOURCES(NAME);
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('0', 'Printer.Start', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Start.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('1', 'Printer.Ticket', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Ticket.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('2', 'Printer.Ticket2', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Ticket2.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('3', 'Printer.TicketPreview', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.TicketPreview.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('4', 'Printer.TicketTotal', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.TicketTotal.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('5', 'Printer.OpenDrawer', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.OpenDrawer.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('6', 'Printer.Ticket.Logo', 1, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Ticket.Logo.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('7', 'Printer.TicketLine', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.TicketLine.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('8', 'Printer.CloseCash', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.CloseCash.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('9', 'Window.Logo', 1, $FILE{/pt/ktc/openk/pos/tools/templates/Window.Logo.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('10', 'Window.Title', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Window.Title.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('11', 'Ticket.Buttons', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Ticket.Buttons.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('12', 'Ticket.Line', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Ticket.Line.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('13', 'Printer.Inventory', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.Inventory.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('14', 'Menu.Root', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Menu.Root.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('15', 'Printer.CustomerPaid', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.CustomerPaid.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('16', 'Printer.CustomerPaid2', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.CustomerPaid2.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('17', 'payment.cash', 0, $FILE{/pt/ktc/openk/pos/tools/templates/payment.cash.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('18', 'banknote.50euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/banknote.50euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('19', 'banknote.20euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/banknote.20euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('20', 'banknote.10euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/banknote.10euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('21', 'banknote.5euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/banknote.5euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('22', 'coin.2euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.2euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('23', 'coin.1euro', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.1euro.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('24', 'coin.50cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.50cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('25', 'coin.20cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.20cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('26', 'coin.10cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.10cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('27', 'coin.5cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.5cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('28', 'coin.2cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.2cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('29', 'coin.1cent', 1, $FILE{/pt/ktc/openk/pos/tools/templates/coin.1cent.png});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('30', 'Printer.PartialCash', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.PartialCash.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('31', 'Printer.TicketCopy', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Printer.TicketCopy.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('32', 'Kitchen.Ticket', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Kitchen.Ticket.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('33', 'Kitchen_2.Ticket', 0, $FILE{/pt/ktc/openk/pos/tools/templates/Kitchen_2.Ticket.xml});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('34', 'code.order', 0, $FILE{/pt/ktc/openk/pos/tools/templates/code.order.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('35', 'event.addline', 0, $FILE{/pt/ktc/openk/pos/tools/templates/event.addline.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('36', 'event.removeline', 0, $FILE{/pt/ktc/openk/pos/tools/templates/event.removeline.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('37', 'event.setline', 0, $FILE{/pt/ktc/openk/pos/tools/templates/event.setline.txt});
INSERT INTO RESOURCES(ID, NAME, RESTYPE, CONTENT) VALUES('38', 'code.preview', 0, $FILE{/pt/ktc/openk/pos/tools/templates/code.preview.txt});


CREATE TABLE TAXCUSTCATEGORIES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX TAXCUSTCAT_NAME_INX ON TAXCUSTCATEGORIES(NAME);

--    ADDRESS VARCHAR NOT NULL,      -- (ATB) Agora e obrigatorio
--    POSTAL VARCHAR NOT NULL,         -- (ATB) Agora e obrigatorio
--    CITY VARCHAR NOT NULL,      -- (ATB) Agora e obrigatorio
--    COUNTRY VARCHAR NOT NULL,  -- (ATB) Agora e obrigatorio

CREATE TABLE CUSTOMERS (
    ID VARCHAR NOT NULL,
    SEARCHKEY VARCHAR NOT NULL,
    TAXID VARCHAR,
    NAME VARCHAR NOT NULL,
    TAXCATEGORY VARCHAR,
    CARD VARCHAR,
    MAXDEBT DOUBLE PRECISION DEFAULT 0 NOT NULL,
    ADDRESS VARCHAR NOT NULL,
    ADDRESS2 VARCHAR,
    POSTAL VARCHAR NOT NULL,
    CITY VARCHAR NOT NULL,
    REGION VARCHAR,
    COUNTRY VARCHAR NOT NULL,
    FIRSTNAME VARCHAR,
    LASTNAME VARCHAR,
    EMAIL VARCHAR,
    PHONE VARCHAR,
    PHONE2 VARCHAR,
    FAX VARCHAR,
    NOTES VARCHAR,
    VISIBLE BOOLEAN NOT NULL DEFAULT TRUE,
    CURDATE TIMESTAMP,
    CURDEBT DOUBLE PRECISION,
    PRIMARY KEY (ID),
    CONSTRAINT CUSTOMERS_TAXCAT FOREIGN KEY (TAXCATEGORY) REFERENCES TAXCUSTCATEGORIES(ID)
);
CREATE UNIQUE INDEX CUSTOMERS_SKEY_INX ON CUSTOMERS(SEARCHKEY);
CREATE INDEX CUSTOMERS_TAXID_INX ON CUSTOMERS(TAXID);
CREATE INDEX CUSTOMERS_NAME_INX ON CUSTOMERS(NAME);
CREATE INDEX CUSTOMERS_CARD_INX ON CUSTOMERS(CARD);
--INSERT INTO CUSTOMERS(ID, SEARCHKEY, TAXID, NAME, ADDRESS, POSTAL, CITY, COUNTRY) VALUES ('10000000-0000-0000-0000-000000000000', 'Cliente 1', '555666555', 'Cliente 1 Lda', 'Rua do Cliente 1', '4444-111', 'Cidade', 'Portugal');
--INSERT INTO CUSTOMERS(ID, SEARCHKEY, TAXID, NAME, ADDRESS, POSTAL, CITY, COUNTRY) VALUES ('20000000-0000-0000-0000-000000000000', 'Cliente 2', '444666555', 'Cliente 2 Lda', 'Rua do Cliente 2', '4444-111', 'Cidade', 'Portugal');
--INSERT INTO CUSTOMERS(ID, SEARCHKEY, TAXID, NAME, ADDRESS, POSTAL, CITY, COUNTRY) VALUES ('30000000-0000-0000-0000-000000000000', 'Cliente 3', '333666555', 'Cliente 3 Lda', 'Rua do Cliente 3', '4444-111', 'Cidade', 'Portugal');



CREATE TABLE CATEGORIES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PARENTID VARCHAR,
    IMAGE BYTEA,
    PRIMARY KEY(ID),
    CONSTRAINT CATEGORIES_FK_1 FOREIGN KEY (PARENTID) REFERENCES CATEGORIES(ID)
);
CREATE UNIQUE INDEX CATEGORIES_NAME_INX ON CATEGORIES(NAME);

CREATE TABLE TAXCATEGORIES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX TAXCAT_NAME_INX ON TAXCATEGORIES(NAME);
INSERT INTO TAXCATEGORIES(ID, NAME) VALUES ('001', 'Taxa Reduz. (6%)');
INSERT INTO TAXCATEGORIES(ID, NAME) VALUES ('002', 'Taxa Inter. (13%)');
INSERT INTO TAXCATEGORIES(ID, NAME) VALUES ('003', 'Taxa Normal (23%)');
INSERT INTO TAXCATEGORIES(ID, NAME) VALUES ('004', 'Isencao Art 9, n 10');

CREATE TABLE TAXES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    CATEGORY VARCHAR NOT NULL,
    CUSTCATEGORY VARCHAR,
    PARENTID VARCHAR,
    RATE DOUBLE PRECISION NOT NULL,
    RATECASCADE BOOLEAN NOT NULL DEFAULT FALSE,
    RATEORDER INTEGER,
    PRIMARY KEY(ID),
    CONSTRAINT TAXES_CAT_FK FOREIGN KEY (CATEGORY) REFERENCES TAXCATEGORIES(ID),
    CONSTRAINT TAXES_CUSTCAT_FK FOREIGN KEY (CUSTCATEGORY) REFERENCES TAXCUSTCATEGORIES(ID),
    CONSTRAINT TAXES_TAXES_FK FOREIGN KEY (PARENTID) REFERENCES TAXES(ID)
);
CREATE UNIQUE INDEX TAXES_NAME_INX ON TAXES(NAME);
INSERT INTO TAXES(ID, NAME, CATEGORY, CUSTCATEGORY, PARENTID, RATE, RATECASCADE, RATEORDER) VALUES ('001', 'Taxa Reduz. (6%)', '001', NULL, NULL, 0.06, FALSE, NULL);
INSERT INTO TAXES(ID, NAME, CATEGORY, CUSTCATEGORY, PARENTID, RATE, RATECASCADE, RATEORDER) VALUES ('002', 'Taxa Inter. (13%)', '002', NULL, NULL, 0.13, FALSE, NULL);
INSERT INTO TAXES(ID, NAME, CATEGORY, CUSTCATEGORY, PARENTID, RATE, RATECASCADE, RATEORDER) VALUES ('003', 'Taxa Normal (23%)', '003', NULL, NULL, 0.23, FALSE, NULL);
INSERT INTO TAXES(ID, NAME, CATEGORY, CUSTCATEGORY, PARENTID, RATE, RATECASCADE, RATEORDER) VALUES ('004', 'Isencao Art9, n 10', '004', NULL, NULL, 0.0, FALSE, NULL);


CREATE TABLE ATTRIBUTE (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE ATTRIBUTEVALUE (
    ID VARCHAR NOT NULL,
    ATTRIBUTE_ID VARCHAR NOT NULL,
    VALUE VARCHAR,
    PRIMARY KEY (ID),
    CONSTRAINT ATTVAL_ATT FOREIGN KEY (ATTRIBUTE_ID) REFERENCES ATTRIBUTE(ID) ON DELETE CASCADE
);

CREATE TABLE ATTRIBUTESET (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE ATTRIBUTEUSE (
    ID VARCHAR NOT NULL,
    ATTRIBUTESET_ID VARCHAR NOT NULL,
    ATTRIBUTE_ID VARCHAR NOT NULL,
    LINENO INTEGER,
    PRIMARY KEY (ID),
    CONSTRAINT ATTUSE_SET FOREIGN KEY (ATTRIBUTESET_ID) REFERENCES ATTRIBUTESET(ID) ON DELETE CASCADE,
    CONSTRAINT ATTUSE_ATT FOREIGN KEY (ATTRIBUTE_ID) REFERENCES ATTRIBUTE(ID)
);
CREATE UNIQUE INDEX ATTUSE_LINE ON ATTRIBUTEUSE(ATTRIBUTESET_ID, LINENO);

CREATE TABLE ATTRIBUTESETINSTANCE (
    ID VARCHAR NOT NULL,
    ATTRIBUTESET_ID VARCHAR NOT NULL,
    DESCRIPTION VARCHAR,
    PRIMARY KEY (ID),
    CONSTRAINT ATTSETINST_SET FOREIGN KEY (ATTRIBUTESET_ID) REFERENCES ATTRIBUTESET(ID) ON DELETE CASCADE
);

CREATE TABLE ATTRIBUTEINSTANCE (
    ID VARCHAR NOT NULL,
    ATTRIBUTESETINSTANCE_ID VARCHAR NOT NULL,
    ATTRIBUTE_ID VARCHAR NOT NULL,
    VALUE VARCHAR,
    PRIMARY KEY (ID),
    CONSTRAINT ATTINST_SET FOREIGN KEY (ATTRIBUTESETINSTANCE_ID) REFERENCES ATTRIBUTESETINSTANCE(ID) ON DELETE CASCADE,
    CONSTRAINT ATTINST_ATT FOREIGN KEY (ATTRIBUTE_ID) REFERENCES ATTRIBUTE(ID)
);

CREATE TABLE PRODUCTS (
    ID VARCHAR NOT NULL,
    REFERENCE VARCHAR NOT NULL,
    CODE VARCHAR NOT NULL,
    CODETYPE VARCHAR,
    NAME VARCHAR NOT NULL,
    PRICEBUY DOUBLE PRECISION NOT NULL,
    PRICESELL DOUBLE PRECISION NOT NULL,
    CATEGORY VARCHAR NOT NULL,
    TAXCAT VARCHAR NOT NULL,
    ATTRIBUTESET_ID VARCHAR,
    STOCKCOST DOUBLE PRECISION,
    STOCKVOLUME DOUBLE PRECISION,
    IMAGE BYTEA,
    ISCOM BOOLEAN NOT NULL DEFAULT FALSE,
    ISSCALE BOOLEAN NOT NULL DEFAULT FALSE,
    ATTRIBUTES BYTEA,
    PRIMARY KEY (ID),
    CONSTRAINT PRODUCTS_FK_1 FOREIGN KEY (CATEGORY) REFERENCES CATEGORIES(ID),
    CONSTRAINT PRODUCTS_TAXCAT_FK FOREIGN KEY (TAXCAT) REFERENCES TAXCATEGORIES(ID),
    CONSTRAINT PRODUCTS_ATTRSET_FK FOREIGN KEY (ATTRIBUTESET_ID) REFERENCES ATTRIBUTESET(ID)
);
CREATE UNIQUE INDEX PRODUCTS_INX_0 ON PRODUCTS(REFERENCE);
CREATE UNIQUE INDEX PRODUCTS_INX_1 ON PRODUCTS(CODE);
CREATE UNIQUE INDEX PRODUCTS_NAME_INX ON PRODUCTS(NAME);


CREATE TABLE PRODUCTS_CAT (
    PRODUCT VARCHAR NOT NULL,
    CATORDER INTEGER,
    PRIMARY KEY (PRODUCT),
    CONSTRAINT PRODUCTS_CAT_FK_1 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID)
);
CREATE INDEX PRODUCTS_CAT_INX_1 ON PRODUCTS_CAT(CATORDER);

CREATE TABLE PRODUCTS_COM (
    ID VARCHAR NOT NULL,
    PRODUCT VARCHAR NOT NULL,
    PRODUCT2 VARCHAR NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT PRODUCTS_COM_FK_1 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT PRODUCTS_COM_FK_2 FOREIGN KEY (PRODUCT2) REFERENCES PRODUCTS(ID)
);
CREATE UNIQUE INDEX PCOM_INX_PROD ON PRODUCTS_COM(PRODUCT, PRODUCT2);

-------

--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('1', 'Entradas', $FILE{/pt/ktc/openk/pos/tools/images/01_entradas.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('2', 'Bebidas', $FILE{/pt/ktc/openk/pos/tools/images/02_bebidas.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('3', 'Vinhos', $FILE{/pt/ktc/openk/pos/tools/images/03_vinhos.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('4', 'Acompanhamentos', $FILE{/pt/ktc/openk/pos/tools/images/04_acompanhamentos.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('5', 'Sopas', $FILE{/pt/ktc/openk/pos/tools/images/05_sopas.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('6', 'Carnes', $FILE{/pt/ktc/openk/pos/tools/images/06_carnes.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('7', 'Peixes', $FILE{/pt/ktc/openk/pos/tools/images/07_peixes.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('8', 'Sobremesas', $FILE{/pt/ktc/openk/pos/tools/images/08_sobremesas.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('9', 'Whisky/Brandy', $FILE{/pt/ktc/openk/pos/tools/images/09_whiskey.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('10', 'Cafetaria', $FILE{/pt/ktc/openk/pos/tools/images/10_cafetaria.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('11', 'Gelados', $FILE{/pt/ktc/openk/pos/tools/images/11_gelados.png});
--INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('13', 'Espumantes', $FILE{/pt/ktc/openk/pos/tools/images/13_espumantes.png});

INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('1', 'Cafetaria', $FILE{/pt/ktc/openk/pos/tools/images/product_001.jpg});
INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('2', 'Aguas', $FILE{/pt/ktc/openk/pos/tools/images/product_020.jpg});
INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('3', 'Cervejas', $FILE{/pt/ktc/openk/pos/tools/images/product_030.jpg});
INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('4', 'Nectares/Sumos', $FILE{/pt/ktc/openk/pos/tools/images/product_050.jpg});
INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('5', 'Refrigerantes', $FILE{/pt/ktc/openk/pos/tools/images/product_060.jpg});
INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('6', 'Cha', $FILE{/pt/ktc/openk/pos/tools/images/product_080.jpg});
INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('7', 'Fogacas', $FILE{/pt/ktc/openk/pos/tools/images/product_100.jpg});
INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('8', 'Pao e fins', $FILE{/pt/ktc/openk/pos/tools/images/product_120.jpg});
INSERT INTO CATEGORIES(ID, NAME, IMAGE) VALUES ('9', 'Confeitaria', $FILE{/pt/ktc/openk/pos/tools/images/product_140.jpg});

-- Categoria 1: Cafetaria
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('1', '1', '1', 'Cafe', '1', 0.01, round(0.65/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_001.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('1');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('2', '2', '2', 'Descafeinado', '1', 0.01, round(0.65/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_002.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('2');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('5', '5', '5', 'Carioca de Limao', '1', 0.01, round(0.60/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_005.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('5');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('8', '8', '8', 'Meia de Leite', '1', 0.01, round(0.90/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_008.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('8');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('9', '9', '9', 'Galao', '1', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_009.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('9');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('10', '10', '10', 'Copo de Leite', '1', 0.01, round(0.90/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_010.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('10');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('11', '11', '11', 'Cafe com Natas', '1', 0.01, round(1.80/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_011.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('11');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('12', '12', '12', 'Leite Achocolatado UCAL', '1', 0.01, round(1.00/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_012.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('12');

-- Categoria 2: Aguas
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('20', '20', '20', 'Agua 50 cl', '2', 0.01, round(1.00/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_020.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('20');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('21', '21', '21', 'Agua das PEDRAS', '2', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_021.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('21');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('22', '22', '22', 'Agua das PEDRAS Limao', '2', 0.01, round(1.25/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_022.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('22');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('23', '23', '23', 'Agua FRIZE Limao', '2', 0.01, round(1.25/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_023.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('23');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('24', '24', '24', 'Pneu', '2', 0.01, round(1.75/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_024.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('24');

-- Categoria 3: Cervejas
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('30', '30', '30', 'Cerveja Fino', '3', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_030.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('30');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('31', '31', '31', 'Cerveja Branca 20cl MINI', '3', 0.01, round(1.00/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_031.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('31');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('32', '32', '32', 'Cerveja branca 33cl', '3', 0.01, round(1.30/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_032.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('32');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('33', '33', '33', 'Panache', '3', 0.01, round(1.00/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_033.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('33');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('34', '34', '34', 'Diesel', '3', 0.01, round(1.00/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_034.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('34');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('35', '35', '35', 'Cerveja sem Alcool', '3', 0.01, round(1.30/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_035.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('35');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('36', '36', '36', 'SUPER BOCK Stout', '3', 0.01, round(1.50/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_036.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('36');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('37', '37', '37', 'CARLSBERG', '3', 0.01, round(1.75/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_037.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('37');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('38', '38', '38', 'HEINEKEN', '3', 0.01, round(1.75/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_038.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('38');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('39', '39', '39', '1664 KRONENBOURG', '3', 0.01, round(2.75/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_039.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('39');

-- Categoria 4: Nectares/Sumos
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('50', '50', '50', 'Compal', '4', 0.01, round(1.20/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_050.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('50');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('51', '51', '51', 'Compal Fresh Maracuja', '4', 0.01, round(1.20/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_051.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('51');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('52', '52', '52', 'Compal Vital Frutos Vermelhos', '4', 0.01, round(1.20/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_052.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('52');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('53', '53', '53', 'Compal Light Manga/Laranja', '3', 0.01, round(1.00/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_053.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('53');

-- Categoria 5: Refrigerantes
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('60', '60', '60', 'Coca-Cola 33cl c/ Limao e Gelo', '5', 0.01, round(1.75/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_060.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('60');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('61', '61', '61', 'Seven Up 33cl', '5', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_061.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('61');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('62', '62', '62', 'Ice Tea 33cl', '5', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_062.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('62');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('63', '63', '63', 'BI 33cl', '5', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_063.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('63');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('64', '64', '64', 'Sumol 25cl', '5', 0.01, round(0.90/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_064.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('64');

INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('65', '65', '65', 'Lata 33cl Guarana', '5', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_065.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('65');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('66', '66', '66', 'Lata 33cl Seven UP', '5', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_066.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('66');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('67', '67', '67', 'Lata 33cl Coca-cola', '5', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_067.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('67');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('68', '68', '68', 'Lata 33cl Pepsi', '5', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_068.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('68');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('69', '69', '69', 'Lata 33cl Sumol', '5', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_069.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('69');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('70', '70', '70', 'Lata 33cl Ice tea', '5', 0.01, round(1.10/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_070.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('70');

-- Categoria 6: Cha
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('80', '80', '80', 'Cha Saqueta', '6', 0.01, round(1.50/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_080.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('80');

-- Categoria 7: Fogacas
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('100', '100', '100', 'Fogaca 1,5 kg', '7', 0.01, round(15.00/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_100.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('100');

-- Categoria 8: Pao e afins�
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('120', '120', '120', 'Pao com Manteiga', '8', 0.01, round(0.90/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_120.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('120');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('122', '122', '122', 'Pao com Queijo', '8', 0.01, round(1.50/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_122.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('122');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('124', '124', '124', 'Pao com Fiambre', '8', 0.01, round(1.50/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_124.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('124');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('129', '129', '129', 'Tosta Mista', '8', 0.01, round(3.00/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_129.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('129');

-- Categoria 9: Confeitaria
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('140', '140', '140', 'Fatia de Bolo', '9', 0.01, round(1.50/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_140.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('140');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('141', '141', '141', 'Fatia de Tarte', '9', 0.01, round(1.50/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_141.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('141');
INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT, IMAGE) VALUES ('142', '142', '142', 'Fatia de Torta', '9', 0.01, round(1.80/1.23, 4), '003', $FILE{/pt/ktc/openk/pos/tools/images/product_142.jpg});
INSERT INTO PRODUCTS_CAT(PRODUCT) VALUES ('142');
-- INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT) VALUES ('143', '143', '143', 'Semifrio Tarte Afonsina', '9', 0.01, round(
-- INSERT INTO PRODUCTS(ID, REFERENCE, CODE, NAME, CATEGORY, PRICEBUY, PRICESELL, TAXCAT) VALUES ('144', '144', '144', 'Semifrio Delicia de Ananas', '9', 0.01, round(


------


CREATE TABLE LOCATIONS (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    ADDRESS VARCHAR,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX LOCATIONS_NAME_INX ON LOCATIONS(NAME);
INSERT INTO LOCATIONS(ID, NAME,ADDRESS) VALUES('0', 'Central', NULL);

CREATE TABLE STOCKDIARY (
    ID VARCHAR NOT NULL,
    DATENEW TIMESTAMP NOT NULL,
    REASON INTEGER NOT NULL,
    LOCATION VARCHAR NOT NULL,
    PRODUCT VARCHAR NOT NULL,
    ATTRIBUTESETINSTANCE_ID VARCHAR,
    UNITS DOUBLE PRECISION NOT NULL,
    PRICE DOUBLE PRECISION NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT STOCKDIARY_FK_1 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT STOCKDIARY_ATTSETINST FOREIGN KEY (ATTRIBUTESETINSTANCE_ID) REFERENCES ATTRIBUTESETINSTANCE(ID),
    CONSTRAINT STOCKDIARY_FK_2 FOREIGN KEY (LOCATION) REFERENCES LOCATIONS(ID)
);
CREATE INDEX STOCKDIARY_INX_1 ON STOCKDIARY(DATENEW);

CREATE TABLE STOCKLEVEL (
    ID VARCHAR NOT NULL,
    LOCATION VARCHAR NOT NULL,
    PRODUCT VARCHAR NOT NULL,
    STOCKSECURITY DOUBLE PRECISION,
    STOCKMAXIMUM DOUBLE PRECISION,
    PRIMARY KEY (ID),
    CONSTRAINT STOCKLEVEL_PRODUCT FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT STOCKLEVEL_LOCATION FOREIGN KEY (LOCATION) REFERENCES LOCATIONS(ID)
);

CREATE TABLE STOCKCURRENT (
    LOCATION VARCHAR NOT NULL,
    PRODUCT VARCHAR NOT NULL,
    ATTRIBUTESETINSTANCE_ID VARCHAR,
    UNITS DOUBLE PRECISION NOT NULL,
    CONSTRAINT STOCKCURRENT_FK_1 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT STOCKCURRENT_ATTSETINST FOREIGN KEY (ATTRIBUTESETINSTANCE_ID) REFERENCES ATTRIBUTESETINSTANCE(ID),
    CONSTRAINT STOCKCURRENT_FK_2 FOREIGN KEY (LOCATION) REFERENCES LOCATIONS(ID)
);
CREATE UNIQUE INDEX STOCKCURRENT_INX ON STOCKCURRENT(LOCATION, PRODUCT, ATTRIBUTESETINSTANCE_ID);

CREATE TABLE CLOSEDCASH (
    MONEY VARCHAR NOT NULL,
    HOST VARCHAR NOT NULL,
    HOSTSEQUENCE INTEGER NOT NULL,
    DATESTART TIMESTAMP NOT NULL,
    DATEEND TIMESTAMP,
    PRIMARY KEY(MONEY)
);
CREATE INDEX CLOSEDCASH_INX_1 ON CLOSEDCASH(DATESTART);
CREATE UNIQUE INDEX CLOSEDCASH_INX_SEQ ON CLOSEDCASH(HOST, HOSTSEQUENCE);

CREATE TABLE RECEIPTS (
    ID VARCHAR NOT NULL,
    MONEY VARCHAR NOT NULL,
    DATENEW TIMESTAMP NOT NULL,
    ATTRIBUTES BYTEA,
    PRIMARY KEY(ID),
    CONSTRAINT RECEIPTS_FK_MONEY FOREIGN KEY (MONEY) REFERENCES CLOSEDCASH(MONEY)
);
CREATE INDEX RECEIPTS_INX_1 ON RECEIPTS(DATENEW);

CREATE TABLE TICKETS (
    ID VARCHAR NOT NULL,
    TICKETTYPE INTEGER DEFAULT 0 NOT NULL,
    TICKETID INTEGER NOT NULL,
    PERSON VARCHAR NOT NULL,
    CUSTOMER VARCHAR,
    STATUS INTEGER DEFAULT 0 NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT TICKETS_FK_ID FOREIGN KEY (ID) REFERENCES RECEIPTS(ID),
    CONSTRAINT TICKETS_FK_2 FOREIGN KEY (PERSON) REFERENCES PEOPLE(ID),
    CONSTRAINT TICKETS_CUSTOMERS_FK FOREIGN KEY (CUSTOMER) REFERENCES CUSTOMERS(ID)
);
CREATE INDEX TICKETS_TICKETID ON TICKETS(TICKETTYPE, TICKETID);

CREATE SEQUENCE TICKETSNUM START WITH 1;
CREATE SEQUENCE TICKETSNUM_REFUND START WITH 1;
CREATE SEQUENCE TICKETSNUM_PAYMENT START WITH 1;
-- uma nova sequencia para as consultas de mesa (preview)
CREATE SEQUENCE TICKETSNUM_PREVIEW START WITH 1;

-- BASEPRICE e DISCOUNT sao novas colunas para suportar descontos
CREATE TABLE TICKETLINES (
    TICKET VARCHAR NOT NULL,
    LINE INTEGER NOT NULL,
    PRODUCT VARCHAR,
    ATTRIBUTESETINSTANCE_ID VARCHAR,
    UNITS DOUBLE PRECISION NOT NULL,
    PRICE DOUBLE PRECISION NOT NULL,
    TAXID VARCHAR NOT NULL,
    ATTRIBUTES BYTEA,
    BASEPRICE double precision NOT NULL default 0,
    DISCOUNT double precision NOT NULL default 0,
    PRIMARY KEY (TICKET, LINE),
    CONSTRAINT TICKETLINES_FK_TICKET FOREIGN KEY (TICKET) REFERENCES TICKETS(ID),
    CONSTRAINT TICKETLINES_FK_2 FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID),
    CONSTRAINT TICKETLINES_ATTSETINST FOREIGN KEY (ATTRIBUTESETINSTANCE_ID) REFERENCES ATTRIBUTESETINSTANCE(ID),
    CONSTRAINT TICKETLINES_FK_3 FOREIGN KEY (TAXID) REFERENCES TAXES(ID)
);

CREATE TABLE PAYMENTS (
    ID VARCHAR NOT NULL,
    RECEIPT VARCHAR NOT NULL,
    PAYMENT VARCHAR NOT NULL,
    TOTAL DOUBLE PRECISION NOT NULL,
    TRANSID VARCHAR,
    RETURNMSG BYTEA,
    PRIMARY KEY (ID),
    CONSTRAINT PAYMENTS_FK_RECEIPT FOREIGN KEY (RECEIPT) REFERENCES RECEIPTS(ID)
);
CREATE INDEX PAYMENTS_INX_1 ON PAYMENTS(PAYMENT);

CREATE TABLE TAXLINES (
    ID VARCHAR NOT NULL,
    RECEIPT VARCHAR NOT NULL,
    TAXID VARCHAR NOT NULL,
    BASE DOUBLE PRECISION NOT NULL,
    AMOUNT DOUBLE PRECISION NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT TAXLINES_TAX FOREIGN KEY (TAXID) REFERENCES TAXES(ID),
    CONSTRAINT TAXLINES_RECEIPT FOREIGN KEY (RECEIPT) REFERENCES RECEIPTS(ID)
);

CREATE TABLE FLOORS (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    IMAGE BYTEA,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX FLOORS_NAME_INX ON FLOORS(NAME);
INSERT INTO FLOORS(ID, NAME, IMAGE) VALUES ('0', 'Sala 1', $FILE{/pt/ktc/openk/pos/tools/images/mesas1.png});
INSERT INTO FLOORS(ID, NAME, IMAGE) VALUES ('1', 'Sala 2', $FILE{/pt/ktc/openk/pos/tools/images/mesas2.png});


CREATE TABLE PLACES (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    X INTEGER NOT NULL,
    Y INTEGER NOT NULL,
    FLOOR VARCHAR NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT PLACES_FK_1 FOREIGN KEY (FLOOR) REFERENCES FLOORS(ID)
);
CREATE UNIQUE INDEX PLACES_NAME_INX ON PLACES(NAME);
-- Sala 1
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('100', 'Balcao 1', 280, 75, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('101', 'Mesa 1', 100, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('102', 'Mesa 2', 247, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('103', 'Mesa 3', 394, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('104', 'Mesa 4', 541, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('105', 'Mesa 5', 688, 177, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('106', 'Mesa 6', 100, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('107', 'Mesa 7', 247, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('108', 'Mesa 8', 394, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('109', 'Mesa 9', 541, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('110', 'Mesa 10', 688, 264, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('111', 'Mesa 11', 100, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('112', 'Mesa 12', 247, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('113', 'Mesa 13', 394, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('114', 'Mesa 14', 541, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('115', 'Mesa 15', 688, 351, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('116', 'Mesa 16', 100, 438, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('117', 'Mesa 17', 247, 438, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('118', 'Mesa 18', 394, 438, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('119', 'Mesa 19', 541, 438, '0');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('120', 'Mesa 20', 688, 438, '0');

-- Sala 2
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('200', 'Balcao 2', 280, 75, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('201', 'Mesa 21', 100, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('202', 'Mesa 22', 247, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('203', 'Mesa 23', 394, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('204', 'Mesa 24', 541, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('205', 'Mesa 25', 688, 177, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('206', 'Mesa 26', 100, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('207', 'Mesa 27', 247, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('208', 'Mesa 28', 394, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('209', 'Mesa 29', 541, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('210', 'Mesa 30', 688, 264, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('211', 'Mesa 31', 100, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('212', 'Mesa 32', 247, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('213', 'Mesa 33', 394, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('214', 'Mesa 34', 541, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('215', 'Mesa 35', 688, 351, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('216', 'Mesa 36', 100, 438, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('217', 'Mesa 37', 247, 438, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('218', 'Mesa 38', 394, 438, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('219', 'Mesa 39', 541, 438, '1');
INSERT INTO PLACES(ID, NAME, X, Y, FLOOR) VALUES ('220', 'Mesa 40', 688, 438, '1');

CREATE TABLE RESERVATIONS (
    ID VARCHAR NOT NULL,
    CREATED TIMESTAMP NOT NULL,
    DATENEW TIMESTAMP DEFAULT '2001-01-01 00:00:00' NOT NULL,
    TITLE VARCHAR NOT NULL,
    CHAIRS INTEGER NOT NULL,
    ISDONE BOOLEAN NOT NULL,
    DESCRIPTION VARCHAR,
    PRIMARY KEY (ID)
);
CREATE INDEX RESERVATIONS_INX_1 ON RESERVATIONS(DATENEW);

CREATE TABLE RESERVATION_CUSTOMERS (
    ID VARCHAR NOT NULL,
    CUSTOMER VARCHAR NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT RES_CUST_FK_1 FOREIGN KEY (ID) REFERENCES RESERVATIONS(ID),
    CONSTRAINT RES_CUST_FK_2 FOREIGN KEY (CUSTOMER) REFERENCES CUSTOMERS(ID)
);

CREATE TABLE THIRDPARTIES (
    ID VARCHAR NOT NULL,
    CIF VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    ADDRESS VARCHAR,
    CONTACTCOMM VARCHAR,
    CONTACTFACT VARCHAR,
    PAYRULE VARCHAR,
    FAXNUMBER VARCHAR,
    PHONENUMBER VARCHAR,
    MOBILENUMBER VARCHAR,
    EMAIL VARCHAR,
    WEBPAGE VARCHAR,
    NOTES VARCHAR,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX THIRDPARTIES_CIF_INX ON THIRDPARTIES(CIF);
CREATE UNIQUE INDEX THIRDPARTIES_NAME_INX ON THIRDPARTIES(NAME);

CREATE TABLE SHAREDTICKETS (
    ID VARCHAR NOT NULL,
    NAME VARCHAR NOT NULL,
    CONTENT BYTEA,
    REFERENCE VARCHAR NULL,
    PRIMARY KEY(ID)
);

-- Criar o role/login 'openk'
-- SELECT count(rolname) as exist_openk FROM pg_roles where rolname='openk';
-- if (exist_openk=0)
create role openk LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE PASSWORD 'openk';

-- Dar acesso ao utilizador 'openk'
grant select, insert, update, delete on applications to openk;
grant select, insert, update, delete on attribute to openk;
grant select, insert, update, delete on attributeinstance to openk;
grant select, insert, update, delete on attributeset to openk;
grant select, insert, update, delete on attributesetinstance to openk;
grant select, insert, update, delete on attributeuse to openk;
grant select, insert, update, delete on attributevalue to openk;
grant select, insert, update, delete on categories to openk;
grant select, insert, update, delete on closedcash to openk;
grant select, insert, update, delete on company to openk;
grant select, insert, update, delete on customers to openk;
grant select, insert, update, delete on floors to openk;
-- ISTO NAO SE PODE FAZER grant select, insert, update, delete on keys to openk;
grant select, insert, update, delete on locations to openk;
grant select, insert, update, delete on payments to openk;
grant select, insert, update, delete on people to openk;
grant select, insert, update, delete on places to openk;
grant select, insert, update, delete on products to openk;
grant select, insert, update, delete on products_cat to openk;
grant select, insert, update, delete on products_com to openk;
grant select, insert on receipts to openk;
grant select, insert, update, delete on reservation_customers to openk;
grant select, insert, update, delete on reservations to openk;
-- O seguinte e' necessario para guardar o activecash
grant select, insert, update on resources to openk;
grant select, insert, update, delete on roles to openk;
grant select, insert, update, delete on sharedtickets to openk;
-- ISTO E MUITO IMPORTANTE!
grant select, insert on signatures to openk;
grant select, insert, update, delete on stockcurrent to openk;
grant select, insert, update, delete on stockdiary to openk;
grant select, insert, update, delete on stocklevel to openk;
grant select, insert, update, delete on taxcategories to openk;
grant select, insert, update, delete on taxcustcategories to openk;
grant select, insert, update, delete on taxes to openk;
grant select, insert on taxlines to openk;
grant select, insert, update, delete on thirdparties to openk;
grant select, insert on ticketlines to openk;
grant select, insert on tickets to openk;

grant select, update on ticketsnum to openk;
grant select, update on ticketsnum_payment to openk;
grant select, update on ticketsnum_refund to openk;
grant select, update on ticketsnum_preview to openk;

-------------------------------------------
-- Funcoes para as copias de seguranca
CREATE OR REPLACE FUNCTION prepare_restore()  RETURNS varchar AS $$
DECLARE
    versao varchar := 'Erro';
 BEGIN
	DROP SCHEMA IF EXISTS backup CASCADE;

    CREATE SCHEMA backup;

    ALTER SCHEMA backup OWNER TO openk;

    versao := 'Sucesso';
    RETURN versao;
 END;
 $$ LANGUAGE plpgsql security definer;

CREATE OR REPLACE FUNCTION execute_backup()  RETURNS varchar AS $$
DECLARE
    versao varchar := 'Erro';
 BEGIN

	DROP SCHEMA IF EXISTS backup CASCADE;

    CREATE SCHEMA backup;

    ALTER SCHEMA backup OWNER TO openk;

    -- GRANT ALL on schema backup to openk;

    CREATE TABLE backup.applications AS SELECT * FROM public.applications;
    CREATE TABLE backup.attribute AS SELECT * FROM public.attribute;
	CREATE TABLE backup.attributeinstance AS SELECT * FROM public.attributeinstance;
	CREATE TABLE backup.attributeset AS SELECT * FROM public.attributeset;
	CREATE TABLE backup.attributesetinstance AS SELECT * FROM public.attributesetinstance;
	CREATE TABLE backup.attributeuse AS SELECT * FROM public.attributeuse;
	CREATE TABLE backup.attributevalue AS SELECT * FROM public.attributevalue;
	CREATE TABLE backup.categories AS SELECT * FROM public.categories;
	CREATE TABLE backup.closedcash AS SELECT * FROM public.closedcash;
	CREATE TABLE backup.company AS SELECT * FROM public.company;
	CREATE TABLE backup.customers AS SELECT * FROM public.customers;
	CREATE TABLE backup.floors AS SELECT * FROM public.floors;
	CREATE TABLE backup.locations AS SELECT * FROM public.locations;
	CREATE TABLE backup.payments AS SELECT * FROM public.payments;
	CREATE TABLE backup.people AS SELECT * FROM public.people;
	CREATE TABLE backup.places AS SELECT * FROM public.places;
	CREATE TABLE backup.products AS SELECT * FROM public.products;
	CREATE TABLE backup.products_cat AS SELECT * FROM public.products_cat;
	CREATE TABLE backup.products_com AS SELECT * FROM public.products_com;
	CREATE TABLE backup.receipts AS SELECT * FROM public.receipts;
	CREATE TABLE backup.reservation_customers AS SELECT * FROM public.reservation_customers;
	CREATE TABLE backup.reservations AS SELECT * FROM public.reservations;
	CREATE TABLE backup.resources AS SELECT * FROM public.resources;
	CREATE TABLE backup.roles AS SELECT * FROM public.roles;
	CREATE TABLE backup.sharedtickets AS SELECT * FROM public.sharedtickets;
	CREATE TABLE backup.signatures AS SELECT * FROM public.signatures;
	CREATE TABLE backup.stockcurrent AS SELECT * FROM public.stockcurrent;
	CREATE TABLE backup.stockdiary AS SELECT * FROM public.stockdiary;
	CREATE TABLE backup.stocklevel AS SELECT * FROM public.stocklevel;
	CREATE TABLE backup.taxcategories AS SELECT * FROM public.taxcategories;
	CREATE TABLE backup.taxcustcategories AS SELECT * FROM public.taxcustcategories;
	CREATE TABLE backup.taxes AS SELECT * FROM public.taxes;
	CREATE TABLE backup.taxlines AS SELECT * FROM public.taxlines;
	CREATE TABLE backup.thirdparties AS SELECT * FROM public.thirdparties;
	CREATE TABLE backup.ticketlines AS SELECT * FROM public.ticketlines;
	CREATE TABLE backup.tickets AS SELECT * FROM public.tickets;

	GRANT ALL on table backup.applications to openk;
	ALTER TABLE backup.applications OWNER TO openk;

	GRANT ALL on table backup.attribute  to openk;
	ALTER TABLE backup.attribute OWNER TO openk;

	GRANT ALL on table backup.attributeinstance to openk;
		ALTER TABLE backup.attributeinstance OWNER TO openk;

	GRANT ALL on table backup.attributeset to openk;
		ALTER TABLE backup.attributeset OWNER TO openk;

	GRANT ALL on table backup.attributesetinstance to openk;
		ALTER TABLE backup.attributesetinstance OWNER TO openk;

	GRANT ALL on table backup.attributeuse to openk;
		ALTER TABLE backup.attributeuse OWNER TO openk;

	GRANT ALL on table backup.attributevalue to openk;
		ALTER TABLE backup.attributevalue OWNER TO openk;

	GRANT ALL on table backup.categories to openk;
		ALTER TABLE backup.categories OWNER TO openk;

	GRANT ALL on table backup.closedcash to openk;
		ALTER TABLE backup.closedcash OWNER TO openk;

	GRANT ALL on table backup.company to openk;
		ALTER TABLE backup.company OWNER TO openk;

	GRANT ALL on table backup.customers to openk;
		ALTER TABLE backup.customers OWNER TO openk;

	GRANT ALL on table backup.floors to openk;
		ALTER TABLE backup.floors OWNER TO openk;

	GRANT ALL on table backup.locations to openk;
		ALTER TABLE backup.locations OWNER TO openk;

	GRANT ALL on table backup.payments to openk;
		ALTER TABLE backup.payments OWNER TO openk;

	GRANT ALL on table backup.people to openk;
		ALTER TABLE backup.people OWNER TO openk;

	GRANT ALL on table backup.places to openk;
		ALTER TABLE backup.places OWNER TO openk;

	GRANT ALL on table backup.products to openk;
		ALTER TABLE backup.products OWNER TO openk;

	GRANT ALL on table backup.products_cat to openk;
		ALTER TABLE backup.products_cat OWNER TO openk;

	GRANT ALL on table backup.products_com to openk;
		ALTER TABLE backup.products_com OWNER TO openk;

	GRANT ALL on table backup.receipts to openk;
		ALTER TABLE backup.receipts OWNER TO openk;

	GRANT ALL on table backup.reservation_customers  to openk;
		ALTER TABLE backup.reservation_customers OWNER TO openk;

	GRANT ALL on table backup.reservations to openk;
		ALTER TABLE backup.reservations OWNER TO openk;

	GRANT ALL on table backup.resources to openk;
		ALTER TABLE backup.resources OWNER TO openk;

	GRANT ALL on table backup.roles to openk;
		ALTER TABLE backup.roles OWNER TO openk;

	GRANT ALL on table backup.sharedtickets to openk;
		ALTER TABLE backup.sharedtickets OWNER TO openk;

	GRANT ALL on table backup.signatures to openk;
		ALTER TABLE backup.signatures OWNER TO openk;

	GRANT ALL on table backup.stockcurrent to openk;
		ALTER TABLE backup.stockcurrent OWNER TO openk;

	GRANT ALL on table backup.stockdiary to openk;
		ALTER TABLE backup.stockdiary OWNER TO openk;

	GRANT ALL on table backup.stocklevel to openk;
		ALTER TABLE backup.stocklevel OWNER TO openk;

	GRANT ALL on table backup.taxcategories to openk;
		ALTER TABLE backup.taxcategories OWNER TO openk;

	GRANT ALL on table backup.taxcustcategories to openk;
		ALTER TABLE backup.taxcustcategories OWNER TO openk;

	GRANT ALL on table backup.taxes to openk;
		ALTER TABLE backup.taxes OWNER TO openk;

	GRANT ALL on table backup.taxlines to openk;
		ALTER TABLE backup.taxlines OWNER TO openk;

	GRANT ALL on table backup.thirdparties to openk;
		ALTER TABLE backup.thirdparties OWNER TO openk;

	GRANT ALL on table backup.ticketlines to openk;
		ALTER TABLE backup.ticketlines OWNER TO openk;

	GRANT ALL on table backup.tickets to openk;
		ALTER TABLE backup.tickets OWNER TO openk;

    versao := 'Sucesso';
    RETURN versao;
END;
$$ LANGUAGE plpgsql security definer;

CREATE OR REPLACE FUNCTION execute_restore()  RETURNS varchar AS $$
DECLARE
    versao varchar := 'Erro';
 BEGIN

	 -- Primeiro remover os dados todos
	DELETE FROM public.sharedtickets WHERE 1=1;
	DELETE FROM public.thirdparties WHERE 1=1;
	DELETE FROM public.reservation_customers WHERE 1=1;
	DELETE FROM public.reservations WHERE 1=1;
	DELETE FROM public.places WHERE 1=1;
	DELETE FROM public.floors WHERE 1=1;
	DELETE FROM public.taxlines WHERE 1=1;
	DELETE FROM public.payments WHERE 1=1;
	DELETE FROM public.ticketlines WHERE 1=1;
	DELETE FROM public.tickets WHERE 1=1;
	DELETE FROM public.receipts WHERE 1=1;
	DELETE FROM public.closedcash WHERE 1=1;
	DELETE FROM public.stockcurrent WHERE 1=1;
	DELETE FROM public.stocklevel WHERE 1=1;
	DELETE FROM public.stockdiary WHERE 1=1;
	DELETE FROM public.locations WHERE 1=1;
	DELETE FROM public.products_com WHERE 1=1;
	DELETE FROM public.products_cat WHERE 1=1;
	DELETE FROM public.products WHERE 1=1;
	DELETE FROM public.attributeinstance WHERE 1=1;
	DELETE FROM public.attributesetinstance WHERE 1=1;
	DELETE FROM public.attributeuse WHERE 1=1;
	DELETE FROM public.attributeset WHERE 1=1;
	DELETE FROM public.attributevalue WHERE 1=1;
    DELETE FROM public.attribute WHERE 1=1;
	DELETE FROM public.taxes WHERE 1=1;
	DELETE FROM public.taxcategories WHERE 1=1;
	DELETE FROM public.categories WHERE 1=1;
	DELETE FROM public.customers WHERE 1=1;
	DELETE FROM public.taxcustcategories WHERE 1=1;
	DELETE FROM public.resources WHERE 1=1;
	DELETE FROM public.people WHERE 1=1;
	DELETE FROM public.roles WHERE 1=1;
    DELETE FROM public.applications WHERE 1=1;
	DELETE FROM public.signatures WHERE 1=1;
	DELETE FROM public.company WHERE 1=1;

	-- depois inserir os dados oriundos do backup
	INSERT INTO public.company SELECT * FROM backup.company;
	INSERT INTO public.signatures SELECT * FROM backup.signatures;
    INSERT INTO public.applications SELECT * FROM backup.applications;
	INSERT INTO public.roles SELECT * FROM backup.roles;
	INSERT INTO public.people SELECT * FROM backup.people;
	INSERT INTO public.resources SELECT * FROM backup.resources;
	INSERT INTO public.taxcustcategories SELECT * FROM backup.taxcustcategories;
	INSERT INTO public.customers SELECT * FROM backup.customers;
	INSERT INTO public.categories SELECT * FROM backup.categories;
	INSERT INTO public.taxcategories SELECT * FROM backup.taxcategories;
	INSERT INTO public.taxes SELECT * FROM backup.taxes;
    INSERT INTO public.attribute SELECT * FROM backup.attribute;
 	INSERT INTO public.attributevalue SELECT * FROM backup.attributevalue;
	INSERT INTO public.attributeset SELECT * FROM backup.attributeset;
	INSERT INTO public.attributeuse SELECT * FROM backup.attributeuse;
	INSERT INTO public.attributesetinstance SELECT * FROM backup.attributesetinstance;
	INSERT INTO public.attributeinstance SELECT * FROM backup.attributeinstance;
	INSERT INTO public.products SELECT * FROM backup.products;
	INSERT INTO public.products_cat SELECT * FROM backup.products_cat;
	INSERT INTO public.products_com SELECT * FROM backup.products_com;
	INSERT INTO public.locations SELECT * FROM backup.locations;
	INSERT INTO public.stockdiary SELECT * FROM backup.stockdiary;
	INSERT INTO public.stocklevel SELECT * FROM backup.stocklevel;
	INSERT INTO public.stockcurrent SELECT * FROM backup.stockcurrent;
	INSERT INTO public.closedcash SELECT * FROM backup.closedcash;
	INSERT INTO public.receipts SELECT * FROM backup.receipts;
	INSERT INTO public.tickets SELECT * FROM backup.tickets;
	INSERT INTO public.ticketlines SELECT * FROM backup.ticketlines;
	INSERT INTO public.payments SELECT * FROM backup.payments;
	INSERT INTO public.taxlines SELECT * FROM backup.taxlines;
	INSERT INTO public.floors SELECT * FROM backup.floors;
	INSERT INTO public.places SELECT * FROM backup.places;
	INSERT INTO public.reservations SELECT * FROM backup.reservations;
	INSERT INTO public.reservation_customers SELECT * FROM backup.reservation_customers;
	INSERT INTO public.thirdparties SELECT * FROM backup.thirdparties;
	INSERT INTO public.sharedtickets SELECT * FROM backup.sharedtickets;

    versao := 'Sucesso';
    RETURN versao;
END;
$$ LANGUAGE plpgsql security definer;

------------------------------------------------------------------------------------------
-- CONFIGURAR O PLJAVA PARA ESTA BASE DE DADOS
CREATE SCHEMA sqlj;
GRANT USAGE ON SCHEMA sqlj TO public;

CREATE FUNCTION sqlj.java_call_handler()
  RETURNS language_handler AS 'pljava'
  LANGUAGE C;

CREATE TRUSTED LANGUAGE java HANDLER sqlj.java_call_handler;

CREATE FUNCTION sqlj.javau_call_handler()
  RETURNS language_handler AS 'pljava'
  LANGUAGE C;

CREATE LANGUAGE javaU HANDLER sqlj.javau_call_handler;

CREATE TABLE sqlj.jar_repository(
	jarId		SERIAL PRIMARY KEY,
	jarName		VARCHAR(100) UNIQUE NOT NULL,
	jarOrigin   VARCHAR(500) NOT NULL,
	jarOwner	NAME NOT NULL,
	jarManifest	TEXT,
	deploymentDesc INT
);
GRANT SELECT ON sqlj.jar_repository TO public;

CREATE TABLE sqlj.jar_entry(
	entryId     SERIAL PRIMARY KEY,
	entryName	VARCHAR(200) NOT NULL,
	jarId		INT NOT NULL REFERENCES sqlj.jar_repository ON DELETE CASCADE,
	entryImage  BYTEA NOT NULL,
	UNIQUE(jarId, entryName)
);
GRANT SELECT ON sqlj.jar_entry TO public;

ALTER TABLE sqlj.jar_repository ADD FOREIGN KEY (deploymentDesc) REFERENCES sqlj.jar_entry ON DELETE SET NULL;

CREATE TABLE sqlj.classpath_entry(
	schemaName	VARCHAR(30) NOT NULL,
	ordinal		INT2 NOT NULL,
	jarId		INT NOT NULL REFERENCES sqlj.jar_repository ON DELETE CASCADE,
	PRIMARY KEY(schemaName, ordinal)
);
GRANT SELECT ON sqlj.classpath_entry TO public;

CREATE TABLE sqlj.typemap_entry(
	mapId		SERIAL PRIMARY KEY,
	javaName	VARCHAR(200) NOT NULL,
	sqlName		NAME NOT NULL
);
GRANT SELECT ON sqlj.typemap_entry TO public;

CREATE FUNCTION sqlj.install_jar(VARCHAR, VARCHAR, BOOLEAN) RETURNS void
	AS 'org.postgresql.pljava.management.Commands.installJar'
	LANGUAGE java SECURITY DEFINER;

CREATE FUNCTION sqlj.install_jar(BYTEA, VARCHAR, BOOLEAN) RETURNS void
	AS 'org.postgresql.pljava.management.Commands.installJar'
	LANGUAGE java SECURITY DEFINER;

CREATE FUNCTION sqlj.replace_jar(VARCHAR, VARCHAR, BOOLEAN) RETURNS void
	AS 'org.postgresql.pljava.management.Commands.replaceJar'
	LANGUAGE java SECURITY DEFINER;

CREATE FUNCTION sqlj.replace_jar(BYTEA, VARCHAR, BOOLEAN) RETURNS void
	AS 'org.postgresql.pljava.management.Commands.replaceJar'
	LANGUAGE java SECURITY DEFINER;

CREATE FUNCTION sqlj.remove_jar(VARCHAR, BOOLEAN) RETURNS void
	AS 'org.postgresql.pljava.management.Commands.removeJar'
	LANGUAGE java SECURITY DEFINER;

CREATE FUNCTION sqlj.set_classpath(VARCHAR, VARCHAR) RETURNS void
	AS 'org.postgresql.pljava.management.Commands.setClassPath'
	LANGUAGE java SECURITY DEFINER;

CREATE FUNCTION sqlj.get_classpath(VARCHAR) RETURNS VARCHAR
	AS 'org.postgresql.pljava.management.Commands.getClassPath'
	LANGUAGE java STABLE SECURITY DEFINER;

CREATE FUNCTION sqlj.add_type_mapping(VARCHAR, VARCHAR) RETURNS void
	AS 'org.postgresql.pljava.management.Commands.addTypeMapping'
	LANGUAGE java SECURITY DEFINER;

CREATE FUNCTION sqlj.drop_type_mapping(VARCHAR) RETURNS void
	AS 'org.postgresql.pljava.management.Commands.dropTypeMapping'
	LANGUAGE java SECURITY DEFINER;

------------------------------------------------------------------------------------------
-- Para o cipher no pljava

SELECT sqlj.install_jar($FILE{/pt/ktc/openk/pos/tools/templates/openk_pljava.jar}, 'openk_pljava', false);

-- Colocar o jar na classpath
SELECT sqlj.set_classpath('public', 'openk_pljava');

-- SELECT sqlj.install_jar('file:///workspaces/openk_pos_v1_1/openk_pos_v1_1/build/jar/openk_pljava.jar', 'openk_pljava', false);
-- SELECT sqlj.replace_jar('file:///workspaces/openk_pos_v1_1/openk_pos_v1_1/build/jar/openk_pljava.jar', 'openk_pljava', false);

-----------------------------------------------------------
-- NOTA IMPORTANTE:
-- AS FUNCOES QUE TEM CODIGO EM PGSQL DEVEM TER NA PRIMEIRA LINHA $$ E NA ULTIMA.
-- ESTA E A FORMA QUE A CLASSE QUE EXECUTA ESTE SCRIPT USA PARA DETECTAR A FUNCAO
-- VER pt.ktc.openk.pos.data.loader.BatchSentenceResource

CREATE OR REPLACE FUNCTION cipher_get_version()  RETURNS varchar AS $$
DECLARE
    versao varchar := '';
 BEGIN
    select keys.version into versao from keys order by keys.version desc limit 1;
    RETURN versao;
END;
$$ LANGUAGE plpgsql security definer;

CREATE OR REPLACE FUNCTION cipher_get_public_key()  RETURNS varchar AS $$
DECLARE
    public varchar := '';
 BEGIN
    select keys.public into public from keys order by keys.version desc limit 1;
    RETURN public;
END;
$$ LANGUAGE plpgsql security definer;

CREATE OR REPLACE FUNCTION cipher_sign_private(varchar, varchar, varchar)
RETURNS varchar AS
'pt.ktc.openk.pos.pljava.Cipher.sign(java.lang.String, java.lang.String, java.lang.String)'
LANGUAGE javaU;

CREATE OR REPLACE FUNCTION cipher_sign(tosign varchar)  RETURNS varchar AS $$
DECLARE
    public varchar := '';
    private varchar := '';
    result varchar := '';
BEGIN
    select keys.public into public from keys order by keys.version desc limit 1;
    select keys.private into private from keys order by keys.version desc limit 1;
    result:=cipher_sign_private(private, public, tosign);
    RETURN result;
END;
$$ LANGUAGE plpgsql security definer;

CREATE OR REPLACE FUNCTION cipher_verify_private(varchar, varchar, varchar, varchar)
RETURNS boolean AS
'pt.ktc.openk.pos.pljava.Cipher.verify(java.lang.String, java.lang.String, java.lang.String, java.lang.String)'
LANGUAGE javaU;

CREATE OR REPLACE FUNCTION cipher_verify(assinatura varchar, origem varchar)  RETURNS boolean AS $$
DECLARE
    public varchar := '';
    private varchar := '';
    result boolean := false;
BEGIN
    select keys.public into public from keys order by keys.version desc limit 1;
    select keys.private into private from keys order by keys.version desc limit 1;
    result:=cipher_verify_private(private, public, assinatura, origem);
    RETURN result;
END;
$$ LANGUAGE plpgsql security definer;

-- ACRESCENTAR AS CHAVES NA BASE DE DADOS
INSERT INTO KEYS(ID, VERSION, PRIVATE, PUBLIC) VALUES (....)

-- Alterar a password do superuser 'postgres'
ALTER ROLE postgres PASSWORD '???';

-- Alterar a password do utilizador normal 'openk'
ALTER ROLE openk PASSWORD '???';
